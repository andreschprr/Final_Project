#the project's intention is to scrape data from Indian election 2019 for each of the 542 constituencies, and regress margin of victory in each constituency on a few different independent variables. 
# there are three independent variables: 1. dummy variable political party of winning candidate; 2. total number of votes cast in the constituency; 3. total number of candidates in the constituency
# there are two sets of URLs from which data has been scraped (each of these URLs keeps changing slightly to depict the different states and the constituencies within them, though the general format remains the same): 1. http://results.eci.gov.in/pc/en/trends/statewiseU011.htm; 2. http://results.eci.gov.in/pc/en/constituencywise/ConstituencywiseS033.htm


import csv
import requests
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np
from sklearn import linear_model

page_number = ['1', '2', '3', '4', '5', '6', '7', '8']
code_of_state = ['01', '02', '24']
state_ut = ['S', 'U']


def scrape1():
    tentative1_name_of_const = []
    tentative2_name_of_const = []
    number_of_candidates = []
    total_votes = []
    td_list = []

    for j in (code_of_state):
        for i in (page_number):
            for k in (state_ut):  
                page = requests.get('http://results.eci.gov.in/pc/en/constituencywise/Constituencywise' + k + j + i +'.htm')
                soup = BeautifulSoup(page.content, 'html.parser')
                full_table = soup.find_all(attrs={"style":"font-size:12px;"})
                if (len(full_table) is not 0):
                    number_of_candidates.append(len(full_table))
                vote_row = soup.find(attrs={"style":"color: #fff; background: #105980; border-color:#673033; border-width:1px;border-style:Solid;font-family:Calibri;"})
                if (vote_row is not None):
                        td_list = vote_row.find_all("td")
                        total_votes.append(td_list[5].get_text())
                name_row = soup.find(class_="table-party")
                if (name_row is not None):
                    tentative1_name_of_const.append(name_row.find("tr").get_text())
                    tentative2_name_of_const.append(tentative1_name_of_const[-1].strip().split("-"))    
    
    x = tuple(tentative2_name_of_const)
    res1 = [lis[1] for lis in x] 
    combined = list(zip(res1, number_of_candidates, total_votes))
    df_const_candidates_votes = pd.DataFrame(np.array(combined), columns = list("abc"))
    df_const_candidates_votes.columns = ['Constituency', 'Candidates', 'Votes']
    with pd.option_context('display.max_rows', None, 'display.max_columns', None):
        print(df_const_candidates_votes)
    return(df_const_candidates_votes)


def scrape2():
    name_of_const = []
    margin = []
    party_name = []

    for j in (code_of_state):
        for i in (page_number):
            for k in (state_ut):   
                    page = requests.get('http://results.eci.gov.in/pc/en/trends/statewise' + k + j + i + '.htm')
                    soup = BeautifulSoup(page.content, 'html.parser')
                    full_table = soup.find_all(attrs={"style":"font-size:12px;"})
                    for td in full_table:
                        name_of_const.append(td.find('td').get_text())
                        margin.append(td.find(attrs={"align":"right"}).get_text())
                        party_name.append(td.find("tbody").find("td").get_text())
            
    combined = list(zip(name_of_const, margin, party_name))
    df_const_margin_party = pd.DataFrame(np.array(combined), columns = list("abc"))
    df_const_margin_party.columns = ['Constituency', 'Margin', 'Party']
    with pd.option_context('display.max_rows', None, 'display.max_columns', None):
        print(df_const_margin_party)
    return(df_const_margin_party)        
        


def merge_operation():
    df1 = scrape1()
    df2 = scrape2()
    df_merged = pd.merge(df1, df2, on='Constituency')
    return (df_merged)



def regression():
    df_merged = merge_operation()
    reg = linear_model.LinearRegression()
    reg.fit(df_merged[['Candidates', 'Votes']], df_merged['Margin'])
    print(reg.coef_)

regression()

def charts():
    df_merged = merge_operation()
    #mean_margin_by_party = merged_df['Margin'][merged_df['Party'] == 'Indian National Congress'].mean()
    seats_for_each_party = merged_df.groupby(['Party']).count()
    print(seats_for_each_party)


